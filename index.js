const Telegraf = require('telegraf');

const Users = require('./Users');
const { forOwnerOnly, noop, selectUser, userToString } = require('./utils');

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.telegram.getMe().then((botInfo) => {
  bot.options.username = botInfo.username;
  console.log("Server has initialized bot nickname. Nick: " + botInfo.username);

  bot.start((ctx) => actions.start(ctx));
  bot.help((ctx) => actions.help(ctx));
  bot.hears(RegExp(bot.options.username), (ctx) => actions.registerUser(ctx));
  bot.command('list', (ctx) => actions.getList(ctx));
  bot.command('run', (ctx) => actions.doDraft(ctx));

  bot.startPolling();
});


const actions = {
  start: (ctx) => {
    const user = selectUser(ctx);
    const canOwnBot = (
      user
      && ctx.message
      && ctx.message.text
      && RegExp(`password=${process.env.OWNER_PASSWORD}`).test(ctx.message.text)
    );
    if (!canOwnBot) {
      return ctx.reply(`–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤–∞–º –Ω–µ–ª—å–∑—è!`);
    }

    const users = new Users();
    users.add(user);
    initActions({ owner: user, users });

    ctx.reply(`–•–æ–∑—è–∏–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  },

  // Lazy init for other actions
  help: noop,
  registerUser: noop,
  getList: noop,
  doDraft: noop,
};

const initActions = ({ owner, users }) => {
  actions.help = (ctx) => {
    ctx.reply(`
–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑—ã–≥—Ä–∞—Ç—å —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—É!
–Ø –≤—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—ã ${userToString(owner)}. –í—Å–µ, –∫—Ç–æ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–ø–æ–º—è–Ω—É–≤ –º–µ–Ω—è (\@${bot.options.username})
–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å –≤–∞–º–∏ –ù–æ–≤—ã–π –ì–æ–¥, –π–æ—Ö–æ—Ö–æ! 
    `);
  };

  actions.registerUser = (ctx) => {
    const user = selectUser(ctx);
    if (!user) {
      return;
    }

    users.add(
      user,
      () => ctx.reply(
`${userToString(user)}, —è –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫! üê∑`
),
      () => ctx.reply(
`${userToString(user)}, —Ç—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è üëç`
)
    );
  };

  actions.getList = forOwnerOnly((ctx) => {
    ctx.reply(users.toString());
  }, owner);

  actions.doDraft = forOwnerOnly((ctx) => {
    users.calculateMap().forEach((target, user) => {
      bot.telegram.sendMessage(user.id,
`
  –ü—Ä–∏–≤–µ—Ç! –¢—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ –∂–µ—Ä–µ–±—å—ë–≤–∫–µ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã –∏ —Ç–µ–±–µ –≤—ã–ø–∞–¥–∞–µ—Ç:
  ${userToString(target)}

  –ù–∞—á–∏–Ω–∞–π –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫! :)
  `
);
    });

    ctx.reply(
`–ö–∞–∂–¥—ã–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º. –£—Å—Ç—Ä–æ–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–µ—Å–µ–ª—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫, –π–æ—Ö–æ—Ö–æ!`
);
  }, owner);
};
